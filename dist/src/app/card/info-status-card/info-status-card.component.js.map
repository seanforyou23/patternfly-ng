{"version":3,"file":"info-status-card.component.js","sourceRoot":"","sources":["../../../../../build/src/app/card/info-status-card/info-status-card.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EAET,KAAK,EAEL,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAEtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAEjE;;GAEG;AASH;IAcE;;OAEG;IACH;QAVQ,kBAAa,GAAyB;YAC5C,aAAa,EAAE,KAAK;YACpB,WAAW,EAAE,IAAI;SAClB,CAAC;IAOa,CAAC;IAEhB;;OAEG;IACH,0CAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,2CAAS,GAAT;QACE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAED;;OAEG;IACO,6CAAW,GAArB;QAEE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAzCgB;QAAhB,KAAK,CAAC,QAAQ,CAAC;kCAAS,oBAAoB;2DAAC;IALnC,uBAAuB;QARnC,SAAS,CAAC;YACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,uBAAuB;YACjC,MAAM,EAAE,CAAC,6uBAA6uB,CAAC;YACvvB,QAAQ,EAAE,y9BAA+6B;SAE17B,CAAC;;OAEW,uBAAuB,CAgDnC;IAAD,8BAAC;CAAA,AAhDD,IAgDC;SAhDY,uBAAuB","sourcesContent":["import {\n  Component,\n  DoCheck,\n  Input,\n  OnInit,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n\nimport { InfoStatusCardConfig } from './info-status-card-config';\n\n/**\n * Info Status Card Component\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-info-status-card',\n  styles: [`.pfng-card-info-status{display:-webkit-box;display:-ms-flexbox;display:flex;margin:0 10px}.pfng-card-info-status .pfng-card-info-image{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-right:15px}.pfng-card-info-status .pfng-card-info-image .info-icon{font-size:50px}.pfng-card-info-status .pfng-card-info-image .info-img{max-height:50px}.pfng-card-info-status .pfng-card-info-content{margin:10px 0}.pfng-card-info-status .pfng-card-info-content .pfng-card-title{margin-top:10px;margin-bottom:15px}`],\n  template: `<div class=\"card-pf pfng-card-info-status\" [class.card-pf-accented]=\"config.showTopBorder\"><div class=\"pfng-card-info-image\"><img *ngIf=\"config.iconImageSrc\" src=\"{{config.iconImageSrc}}\" alt=\"\" class=\"info-img\"> <span class=\"info-icon {{config.iconStyleClass}}\"></span></div><div class=\"pfng-card-info-content\"><h2 *ngIf=\"config.title\" class=\"pfng-card-title\"><a *ngIf=\"config.href\" href=\"{{config.href}}\"><span>{{config.title}}</span> </a><span *ngIf=\"!config.href\"><span>{{config.title}}</span></span></h2><ng-container *ngIf=\"config.htmlContent !== undefined\"><div *ngIf=\"config.htmlContent; then showHtmlContent else showPlainTextContent\"></div><ng-template #showHtmlContent><div [innerHTML]=\"item\" class=\"pfng-card-info-item\" *ngFor=\"let item of config.info\"></div></ng-template><ng-template #showPlainTextContent><div class=\"pfng-card-info-item\" *ngFor=\"let item of config.info\">{{item}}</div></ng-template></ng-container></div></div>`\n\n})\n\nexport class InfoStatusCardComponent implements OnInit, DoCheck {\n\n  /**\n   * The config object containing component properties\n   */\n  @Input('config') config: InfoStatusCardConfig;\n\n  private defaultConfig: InfoStatusCardConfig = {\n    showTopBorder: false,\n    htmlContent: true\n  };\n\n  private prevConfig: InfoStatusCardConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {}\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   * Check if any component config props have changed\n   */\n  ngDoCheck(): void {\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}