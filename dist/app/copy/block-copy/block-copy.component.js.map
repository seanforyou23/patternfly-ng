{"version":3,"file":"block-copy.component.js","sourceRoot":"","sources":["../../../../build/src/app/copy/block-copy/block-copy.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAS3D;IAaE;;OAEG;IACH,4BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAd5B,UAAK,GAAW,mCAAmC,CAAC;QAC/C,eAAU,GAAW,MAAM,CAAC;QACxB,mBAAc,GAAY,KAAK,CAAC;QAE5B,sBAAiB,GAAG,IAAI,YAAY,EAAE,CAAC;QAEpE;;WAEG;QACI,SAAI,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;IAKT,CAAC;IAEhD;;OAEG;IACH,6CAAgB,GAAhB;QACE,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,iDAAoB,GAApB;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAI,IAAI,CAAC,KAAK,aAAU,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,KAAO,CAAC,CAAC;QAChD,CAAC;IACL,CAAC;IAED;;OAEG;IACH,+CAAkB,GAAlB,UAAmB,cAAsB;QACvC,MAAM,CAAC,YAAU,cAAc,eAAY,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,6CAAgB,GAAhB,UAAiB,cAAsB;QACrC,MAAM,CAAC,UAAQ,cAAgB,CAAC;IAClC,CAAC;IAED,qCAAQ,GAAR;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IACjF,CAAC;IApDe;QAAf,KAAK,CAAC,OAAO,CAAC;;qDAAe;IACd;QAAf,KAAK,CAAC,OAAO,CAAC;;qDAAqD;IAC/C;QAApB,KAAK,CAAC,YAAY,CAAC;;0DAA6B;IACxB;QAAxB,KAAK,CAAC,gBAAgB,CAAC;;8DAAiC;IAE5B;QAA5B,MAAM,CAAC,mBAAmB,CAAC;;iEAAwC;IANzD,kBAAkB;QAP9B,SAAS,CAAC;YACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,i3BAAy0B;YACn1B,SAAS,EAAE,CAAC,6BAA6B,CAAC;SAC3C,CAAC;yCAkBiC,WAAW;OAhBjC,kBAAkB,CAsD9B;IAAD,yBAAC;CAAA,AAtDD,IAsDC;SAtDY,kBAAkB","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { CopyService } from '../copy-service/copy.service';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-block-copy',\n  template: `<div><label [attr.for]=\"'pf-copy-token-button-' + hash\">{{label}}</label><div class=\"copy\"><div class=\"copy-preview\" [ngClass]=\"{'pf-is-open': tokenPanelOpen}\"><button [attr.aria-label]=\"expandBtnAriaLabel(label)\" [attr.aria-expanded]=\"tokenPanelOpen\" class=\"copy-preview-btn\" (click)=\"toggleTokenPanel()\"><i class=\"fa copy-preview-icon\" [ngClass]=\"{'fa-angle-down': tokenPanelOpen, 'fa-angle-right': !tokenPanelOpen}\"></i></button><div class=\"copy-preview-txt-cont\"><span data-toggle=\"tooltip\" data-placement=\"top\" [tooltip]=\"label\">{{token}}</span></div><button [attr.id]=\"'pf-copy-token-button-' + hash\" class=\"btn btn-lg btn-default copy-btn\" [attr.aria-label]=\"copyBtnAriaLabel(label)\" (click)=\"copyTokenToClipboard()\">{{copyBtnTxt}}</button></div><div class=\"copy-body\" *ngIf=\"tokenPanelOpen\"><span>{{token}}</span></div></div></div>`,\n  styleUrls: ['./block-copy.component.less']\n})\n\nexport class BlockCopyComponent implements OnInit {\n  @Input('label') label: string;\n  @Input('token') token: string = 'Missing \\'token\\' @Input property';\n  @Input('copyBtnTxt') copyBtnTxt: string = 'Copy';\n  @Input('tokenPanelOpen') tokenPanelOpen: boolean = false;\n\n  @Output('copiedToClipboard') copiedToClipboard = new EventEmitter();\n\n  /**\n   * Used to uniquly relate label to copy button\n   */\n  public hash: number = Math.floor(Math.random() * 10000);\n\n  /**\n   * The default constructor\n   */\n  constructor(private copyService: CopyService) {}\n\n  /**\n   * Toggle copy token panel open and close\n   */\n  toggleTokenPanel(): void {\n    this.tokenPanelOpen = !this.tokenPanelOpen;\n  }\n\n  /**\n   * Copy token to the user's system clipboard\n   */\n  copyTokenToClipboard(): void {\n      let result = this.copyService.copy(this.token);\n      if (result) {\n        this.copiedToClipboard.emit(`${this.label} copied!`);\n      } else {\n        console.error(`Failed to copy ${this.label}`);\n      }\n  }\n\n  /**\n   * Define format for expand button's aria label\n   */\n  expandBtnAriaLabel(componentLabel: string): string {\n    return `Expand ${componentLabel} Container`;\n  }\n\n  /**\n   * Define format for copy button's aria label\n   */\n  copyBtnAriaLabel(componentLabel: string): string {\n    return `Copy ${componentLabel}`;\n  }\n\n  ngOnInit() {\n    if (!this.label) throw new Error('Missing required @Input property \\'label\\'');\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}