{"version":3,"file":"copy-base.js","sourceRoot":"","sources":["../../../build/src/app/copy/copy-base.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,YAAY,EACZ,KAAK,EACL,MAAM,GACP,MAAM,eAAe,CAAC;AAYrB;;GAEG;AACL;IA0CE;;OAEG;IACH,kBAAsB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAtC9C;;;WAGG;QACiB,cAAS,GAAW,uCAAuC,CAAC;QAQhF;;;WAGG;QACwB,qBAAgB,GAAW,KAAK,CAAC;QAE5D;;;WAGG;QAC0B,sBAAiB,GAA4B,IAAI,YAAY,EAAE,CAAC;QAErF,oBAAe,GAAY,KAAK,CAAC;IAcQ,CAAC;IAPlD,sBAAW,oCAAc;QALzB;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;;;OAAA;IAOD;;;OAGG;IACO,uCAAoB,GAA9B,UAA+B,cAAsB;QAArD,iBAYC;QAXC,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;gBAC1B,IAAI,EAAE,cAAc;gBACpB,GAAG,EAAK,cAAc,YAAS;aACnB,CAAC,CAAC;YAChB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,UAAU,CAAC;gBACT,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC/B,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IA1D0B;QAA1B,KAAK,CAAC,kBAAkB,CAAC;;sDAA0B;IAMhC;QAAnB,KAAK,CAAC,WAAW,CAAC;;+CAA6D;IAM9D;QAAjB,KAAK,CAAC,SAAS,CAAC;;6CAAiB;IAMP;QAA1B,KAAK,CAAC,kBAAkB,CAAC;;sDAAkC;IAM/B;QAA5B,MAAM,CAAC,mBAAmB,CAAC;kCAAoB,YAAY;uDAAiC;IAmC/F,eAAC;CAAA,AAhED,IAgEC;SAhEqB,QAAQ","sourcesContent":["import {\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\nimport { CopyService } from './copy-service/copy.service';\n\n  /**\n   * A standard structure for result of copied to clipboard action\n   */\nexport interface CopiedMsg {\n  name: string;\n  msg: string;\n}\n\n  /**\n   * A config containing properties for copy components\n   */\nexport abstract class CopyBase {\n  /**\n   * Copy button aria label (announced to screen readers)\n   * @type {string}\n   */\n  @Input('copyBtnAriaLabel') copyBtnAriaLabel: string;\n\n  /**\n   * The text node to be copied to the users clipboard\n   * @type {string}\n   */\n  @Input('copyValue') copyValue: string = 'Missing \\'copyValue\\' @Input property';\n\n  /**\n   * Tooltip text for the copyValue\n   * @type {string}\n   */\n  @Input('tooltip') tooltip: string;\n\n  /**\n   * Placement for the tooltip that further describes the copyValue\n   * @type {string}\n   */\n  @Input('tooltipPlacement') tooltipPlacement: string = 'top';\n\n  /**\n   * Event emitted with the chart reference after load is complete\n   * @type {EventEmitter}\n   */\n  @Output('copiedToClipboard') copiedToClipboard: EventEmitter<CopiedMsg> = new EventEmitter();\n\n  private _recentlyCopied: boolean = false;\n\n  /**\n   * Returns the flag indicating copy action has just happened\n   *\n   * @returns {boolean} True if copy action has been triggered\n   */\n  public get recentlyCopied(): boolean {\n    return this._recentlyCopied;\n  }\n\n  /**\n   * Default constructor\n   */\n  constructor(protected copyService: CopyService) {}\n\n  /**\n   * Copy value to the user's system clipboard\n   * @param {string} accessibleName An accessible name used to describe the component\n   */\n  protected copyValueToClipboard(accessibleName: string): void {\n    let result = this.copyService.copy(this.copyValue);\n    if (result) {\n      this.copiedToClipboard.emit({\n        name: accessibleName,\n        msg: `${accessibleName} copied`\n      } as CopiedMsg);\n      this._recentlyCopied = true;\n      setTimeout(() => {\n        this._recentlyCopied = false;\n      }, 3000);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}