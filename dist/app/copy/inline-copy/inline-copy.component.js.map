{"version":3,"file":"inline-copy.component.js","sourceRoot":"","sources":["../../../../build/src/app/copy/inline-copy/inline-copy.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAS3D;IAOE;;OAEG;IACH,6BACU,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QATlB,UAAK,GAAW,mCAAmC,CAAC;QAC/C,eAAU,GAAW,MAAM,CAAC;QAEpB,sBAAiB,GAAG,IAAI,YAAY,EAAE,CAAC;IAM/B,CAAC;IAEtC,sCAAQ,GAAR;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,kDAAoB,GAApB;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAI,IAAI,CAAC,KAAK,aAAU,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,KAAO,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IA1Be;QAAf,KAAK,CAAC,OAAO,CAAC;;sDAAe;IACd;QAAf,KAAK,CAAC,OAAO,CAAC;;sDAAqD;IAC/C;QAApB,KAAK,CAAC,YAAY,CAAC;;2DAA6B;IAEpB;QAA5B,MAAM,CAAC,mBAAmB,CAAC;;kEAAwC;IALzD,mBAAmB;QAP/B,SAAS,CAAC;YACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,kBAAkB;YAC5B,QAAQ,EAAE,sSAAoR;YAC9R,SAAS,EAAE,CAAC,8BAA8B,CAAC;SAC5C,CAAC;yCAauB,WAAW;OAXvB,mBAAmB,CA4B/B;IAAD,0BAAC;CAAA,AA5BD,IA4BC;SA5BY,mBAAmB","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { CopyService } from '../copy-service/copy.service';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-inline-copy',\n  template: `<span class=\"inline-copy\"><span class=\"token-cont\" data-toggle=\"tooltip\" data-placement=\"top\" [tooltip]=\"label\">{{token}} </span><button class=\"copy-btn\" [attr.aria-label]=\"copyBtnTxt + ' ' + label\" (click)=\"copyTokenToClipboard()\"><i class=\"fa fa-copy\"></i></button></span>`,\n  styleUrls: ['./inline-copy.component.less']\n})\n\nexport class InlineCopyComponent implements OnInit {\n  @Input('label') label: string;\n  @Input('token') token: string = 'Missing \\'token\\' @Input property';\n  @Input('copyBtnTxt') copyBtnTxt: string = 'Copy';\n\n  @Output('copiedToClipboard') copiedToClipboard = new EventEmitter();\n\n  /**\n   * The default constructor\n   */\n  constructor(\n    private copyService: CopyService) {}\n\n  ngOnInit(): void {\n    if (!this.label) throw new Error('Missing required @Input property \\'label\\'');\n  }\n\n  /**\n   * Copy token to the user's system clipboard\n   */\n  copyTokenToClipboard(): void {\n    let result = this.copyService.copy(this.token);\n    if (result) {\n      this.copiedToClipboard.emit(`${this.label} copied!`);\n    } else {\n      console.error(`Failed to copy ${this.label}`);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}